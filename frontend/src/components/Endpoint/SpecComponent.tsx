import { useState } from "react"
import {
  Box,
  useColorModeValue,
  HStack,
  InputGroup,
  InputLeftElement,
  Input,
  Tag,
  IconButton,
  Select,
} from "@chakra-ui/react"
import debounce from "lodash/debounce"
import { saveAs } from "file-saver"
import YAML from "yaml"
import JsYaml from "js-yaml"
import Highlight, { defaultProps } from "prism-react-renderer"
import darkTheme from "prism-react-renderer/themes/duotoneDark"
import lightTheme from "prism-react-renderer/themes/github"
import { GoSearch } from "@react-icons/all-files/go/GoSearch"
import { FiDownload } from "@react-icons/all-files/fi/FiDownload"
import { ApiEndpointDetailed } from "@common/types"
import { SpecExtension } from "@common/enums"

interface SpecComponentProps {
  endpoint: ApiEndpointDetailed
}

const EXTENSION_TO_TYPE: Record<SpecExtension, string> = {
  [SpecExtension.YAML]: "application/yaml;charset=utf-8",
  [SpecExtension.JSON]: "application/json;charset=utf-8",
}

const SpecComponent: React.FC<SpecComponentProps> = ({ endpoint }) => {
  const theme = useColorModeValue(lightTheme, darkTheme)
  const [specString, setSpecString] = useState<string>(
    endpoint.openapiSpec.spec,
  )
  const [currExtension, setCurrExtension] = useState<SpecExtension>(
    endpoint.openapiSpec.extension,
  )
  const [searchQuery, setSearchQuery] = useState<string>("")

  const blob = new Blob([specString], {
    type: EXTENSION_TO_TYPE[currExtension],
  })

  const changeExtenstionHandler = (e: React.ChangeEvent<HTMLSelectElement>) => {
    const extension = e.target.value
    if (extension === endpoint.openapiSpec.extension) {
      setSpecString(endpoint.openapiSpec.spec)
      setCurrExtension(endpoint.openapiSpec.extension)
    } else if (extension === SpecExtension.YAML) {
      const doc = new YAML.Document()
      doc.contents = JSON.parse(specString)
      setSpecString(doc.toString())
      setCurrExtension(SpecExtension.YAML)
    } else if (extension === SpecExtension.JSON) {
      const specObj = JsYaml.load(specString)
      const jsonString = JSON.stringify(specObj, null, 2)
      setSpecString(jsonString)
      setCurrExtension(SpecExtension.JSON)
    }
  }

  const downloadFileHandler = () => {
    saveAs(blob, `${endpoint?.openapiSpec?.name}.${currExtension}`)
  }

  const debounceSearch = debounce(setSearchQuery, 500)

  return (
    <Box w={{ base: "full", lg: "50%" }} h="full">
      <HStack
        w="full"
        px="4"
        borderWidth={1}
        h="60px"
        justifyContent="space-between"
      >
        <HStack spacing="4">
          <InputGroup
            w={{ base: "150px", sm: "200px", lg: "150px", xl: "250px" }}
          >
            <InputLeftElement pointerEvents="none">
              <GoSearch />
            </InputLeftElement>
            <Input
              onChange={e => debounceSearch(e.target.value)}
              type="text"
              placeholder="Search"
            />
          </InputGroup>
          {endpoint?.openapiSpec?.isAutoGenerated && (
            <Tag rounded="3xl" size="lg" colorScheme="orange">
              Generated
            </Tag>
          )}
        </HStack>
        <HStack spacing="4">
          <Select
            defaultValue={endpoint?.openapiSpec?.extension}
            w="fit-content"
            onChange={changeExtenstionHandler}
          >
            <option value={SpecExtension.YAML}>yaml</option>
            <option value={SpecExtension.JSON}>json</option>
          </Select>
          <IconButton
            onClick={downloadFileHandler}
            borderWidth={1}
            aria-label="download-button"
            icon={<FiDownload />}
          />
        </HStack>
      </HStack>
      <Box overflowY="auto" h={{ base: "700px", lg: "calc(100% - 60px)" }}>
        <Highlight
          {...defaultProps}
          theme={theme}
          code={specString || "No spec."}
          language={currExtension || "yaml"}
        >
          {({ className, style, tokens, getLineProps, getTokenProps }) => (
            <pre
              className={className}
              style={{
                ...style,
                fontSize: "14px",
                padding: "8px",
                overflowX: "scroll",
                minHeight: "100%",
              }}
            >
              {tokens.map((line, i) => (
                <pre
                  style={{
                    textAlign: "left",
                    margin: "1em 0",
                    padding: "0.5em",
                    overflow: "scroll",
                  }}
                  key={i}
                  {...getLineProps({ line, key: i })}
                >
                  <span
                    style={{
                      display: "table-cell",
                      textAlign: "right",
                      paddingRight: "1em",
                      userSelect: "none",
                      opacity: "0.5",
                    }}
                  >
                    {i + 1}
                  </span>
                  <span style={{ display: "table-cell" }}>
                    {line.map((token, key) => {
                      const matchedString =
                        searchQuery && token.content.includes(searchQuery)
                      const color = matchedString
                        ? "var(--chakra-colors-orange-100)"
                        : "transparent"
                      return (
                        <div
                          key={key}
                          style={{
                            display: "inline-block",
                            backgroundColor: color,
                          }}
                        >
                          <span {...getTokenProps({ token, key })} />
                        </div>
                      )
                    })}
                  </span>
                </pre>
              ))}
            </pre>
          )}
        </Highlight>
      </Box>
    </Box>
  )
}

export default SpecComponent
